import {CSSLink, matchSign} from "./cssLink";
import SuperchargedLinks from "../../main";
import {displayText} from "./cssBuilderModal";


const colorSet = [[
    '#0089BA',
    '#2C73D2',
    '#008E9B',
    '#0081CF',
    '#008F7A',
    '#008E9B',
], [
    '#D65DB1',
    '#0082C1',
    '#9270D3',
    '#007F93',
    '#007ED9',
    '#007660',
], [
    '#FF9671',
    '#A36AAA',
    '#F27D88',
    '#6967A9',
    '#D26F9D',
    '#1b6299',
], [
    '#FFC75F',
    '#4C9A52',
    '#C3BB4E',
    '#00855B',
    '#88AC4B',
    '#006F61',
], [
    '#FF6F91',
    '#6F7F22',
    '#E07250',
    '#257A3E',
    '#AC7C26',
    '#006F5F',
], [
    '#F9F871',
    '#2FAB63',
    '#B8E067',
    '#008E63',
    '#78C664',
    '#007160',
]];
const colors: string[] = [];
for (const i of Array(6).keys()) {
    for (const j of Array(6).keys()) {
        colors.push(colorSet[j][i]);
    }
}

export async function buildCSS(selectors: CSSLink[], plugin: SuperchargedLinks) {
    // TODO
    // console.log(this.linksTypes.length == Object.keys(linkTypes).length)
    const selectedLinksTypes: string[] = []

    const instructions: string[] = [
        "/* WARNING: This file will be overwritten by the plugin.",
        "Do not edit this file directly! First copy this file and rename it if you want to edit things. */",
        ":root {"
    ];


    selectors.forEach((selector, i) => {
        let cssSelector: string;
        instructions.push(...[
            `    --${selector.uid}-color: ${colors[i % 36]};`,
            `    --${selector.uid}-before: '';`,
        ]);
    });
    instructions.push("}");

    selectors.forEach(selector => {
        let cssSelector: string;
        if (selector.type === 'attribute') {
            cssSelector = `[data-link-${selector.name}${matchSign[selector.match]}="${selector.value}" ${selector.matchCaseSensitive ?"" : " i"}]`;
        }
        else if (selector.type === 'tag') {
            cssSelector = `[data-link-tags*="${selector.value}" i]`;
        }
        else {
            cssSelector = `[data-link-path${matchSign[selector.match]}="${selector.value}" ${selector.matchCaseSensitive ?"" : "i"}]`;
        }

        instructions.push(...[
            "",
            `div[data-id="${selector.uid}"] div.setting-item-name,`,
            cssSelector + " {",
            `   color: var(--${selector.uid}-color) !important;`,
            "}",
            "",
            `div[data-id="${selector.uid}"] div.setting-item-name,`,
            `.data-link-icon${cssSelector}::before {`,
            `   content: var(--${selector.uid}-before);`,
            "}"
        ]);
    });

    instructions.push(...[
        "/* @settings",
        "name: Supercharged Links",
        "id: supercharged-links",
        "settings:",
    ]);

    selectors.forEach((selector, i) => {
        let name = selector.name;
        let value = selector.value;
        if (selector.type === 'tag') {
            name = 'tag';
            // value = "\#" + value;
        }
        else if (selector.type === 'path'){
            name = 'path';
        }
        instructions.push(...[
            "    - ",
            `        id: ${selector.uid}`,
            `        title: ${name} is ${value}`,
            "        type: heading",
            "        collapsed: true",
            "        level: 3",
            "    - ",
            `        id: ${selector.uid}-color`,
            `        title: Link color`,
            "        type: variable-color",
            "        format: hex",
            `        default: '${colors[i % 36]}'`,
            "    - ",
            `        id: ${selector.uid}-before`,
            `        title: Prepend text`,
            `        description: Add some text, such as an emoji, before the links.`,
            "        type: variable-text",
            `        default: 'asd'`,
        ]);
    });
    instructions.push("*/")

    const vault = plugin.app.vault;
    const path = ".obsidian/snippets/supercharged-links-gen.css";
    if (vault.adapter.exists(path)) {
        await vault.adapter.remove(path);
    }
    await plugin.app.vault.create(path, instructions.join('\n'));

    plugin.app.workspace.trigger("parse-style-settings");

    // return instructions.join('\n')
}
